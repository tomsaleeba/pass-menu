#!/usr/bin/env bash

set -eux
readonly VERSION="v1.0"

MENUCMD=""
TIMEOUT="45"
STOREDIR="${PASSWORD_STORE_DIR-$HOME/.password-store}"
autotypeKey='autotype'
isExplicitExit=no

# thanks https://medium.com/@dirk.avery/the-bash-trap-trap-ce6083f36700
trap 'catch $? $LINENO' EXIT

catch() {
  if [ "$isExplicitExit" = "no" ] && [ "$1" != "0" ]; then
    # exiting due to error
    local errMsg="[ERROR] pass-menu: return code $1 occurred on line $2"
    echo "$errMsg"
    notify-send "$errMsg"
    logger -t pass-menu "$errMsg"
    sleep 10 # for a chance to see the error
  fi
}

if [ -n "${WAYLAND_DISPLAY:-}" ]; then
  FOCUS_TOGGLE_CMD="swaymsg 'focus mode_toggle'"
  DOTOOL="wtype -"
	if ! type $DOTOOL &>/dev/null; then
    echo "[ERROR] $DOTOOL command not found"
    notify-send "[ERROR] failed to find required '$DOTOOL' command"
    exit 1
	fi
	CLIPSET="wl-copy"
	CLIPGET="wl-paste"
elif [ -n "${DISPLAY:-}" ]; then
  FOCUS_TOGGLE_CMD="i3-msg 'focus mode_toggle'"
  DOTOOL="xdotool type --clearmodifiers --file -"
  CLIPSET="xclip -selection clipboard"
  CLIPGET="xclip -selection clipboard -o"
else
  echo "[ERROR] can't determine system type"
  exit 1
fi

# ---------------------- #
#          INFO          #
# ---------------------- #
show-help () {
	echo \
"Usage: pass-menu [OPTIONS] -- COMMAND [ARGS]

Options:
  -p, --path              path to password store
      --timeout           timeout for clearing clipboard [default: 45]
  -h, --help              display this help and exit
  -v, --version           output version information and exit

Examples:
	pass-menu --timeout 15 -- fzf
	pass-menu              -- dmenu -i -l 15"

	exit 0
}

show-version () {
	echo "${VERSION}"
	exit 0
}

error () {
  local  MSG="${1}"; shift 1
  local ARGS="${@}"

  local m=$(printf "pass-menu: ${MSG}\n" ${ARGS})
  echo $m >&2
  notify-send "ERROR: $m"
  logger -t pass-menu "ERROR: $m"
  isExplicitExit=yes
  exit 1
}

# ---------------------- #
#          OPTS          #
# ---------------------- #
set-opt-path () {
	local OPTION="${1}"

	if [ ! -d "${OPTION}" ]; then
		error '--path "%s" is not a valid directory.' "${OPTION}"
	fi

	STOREDIR="${OPTION}"
}

set-opt-timeout () {
	local OPTION="${1}"

	if [[ ! "${OPTION}" =~ ^[0-9]+$ ]]; then
		error '"--timeout" must be an integer'
	elif [ "${OPTION}" -lt 10 ]; then
		error '"--timeout" must be greater than 10'
	fi
	
	TIMEOUT="${OPTION}"
}

set-opt-cmd () {
	local OPTION="${*}"

	MENUCMD="${OPTION}"
}

opt-error () {
	local OPTION="${1}"

	error 'invalid option "%s"' "${OPTION}"
}

while [ -v 1 ]; do
	case "${1}" in
		-p | --path)     set-opt-path "${2}"; shift 2 ;;
		     --timeout)  set-opt-timeout "${2}" ; shift 2 ;;
		-h | --help)     show-help ;;
		-v | --version)  show-version ;;
		--)              shift; set-opt-cmd "${@}"; break ;;
		*)               opt-error "${1}" ;;
	esac
done

if [ -z "${MENUCMD}" ]; then
	error "missing required argument COMMAND"
fi

# ---------------------- #
#         UTILS          #
# ---------------------- #
clip-copy () {
	local VALUE="${1}"
	local ORIG="$(${CLIPGET})"
	local MSG="Copied to clipboard. Will clear in ${TIMEOUT} seconds."
	
	printf "${VALUE}" | ${CLIPSET}
	printf "%s\n" "${MSG}"

	if type notify-send &>/dev/null; then
		notify-send "${MSG}"
	fi

	{
		sleep "${TIMEOUT}" || exit 1
		# restore clipboard back to orginal if it hasn't changed.
		if [ "$(${CLIPGET})" = "${VALUE}" ]; then
			printf "${ORIG}" | ${CLIPSET}
		fi
	} &
}

dotool-type () {
	local VALUE="${1}"
  local delay="${2:-}"
  local delayFrag=''
  if [ -n "$delay" ]; then
    delayFrag="--delay $delay"
  fi
  bash -c "${FOCUS_TOGGLE_CMD}"
  sleep 0.05
  # we want to type the value literally, no interpreting of escape chars,
  #  etc. `printf` isn't the right tool for the job, but echo in bash seems to do
  #  the trick. We can also use ${VALUE@Q} or @A if we get stuck, thanks to
  #  https://stackoverflow.com/a/27817504/1410035 for the tip.
  echo -n "${VALUE}" | ${DOTOOL} ${delayFrag}
  bash -c "${FOCUS_TOGGLE_CMD}"
}

# ---------------------- #
#          MAIN          #
# ---------------------- #
get-pass-files () {
	shopt -s nullglob globstar

	local LIST
	LIST=("$STOREDIR"/**/*.gpg)
	LIST=("${LIST[@]#"$STOREDIR"/}")
	LIST=("${LIST[@]%.gpg}")
  set +x
	printf "%s\n" "${LIST[@]}"
  set -x
}

get-pass-keys () {
	local PASS_NAME="${1}"
	local PASS_FILE_CONTENTS="$(pass "${PASS_NAME}")"
	
	if [ ${#PASS_FILE_CONTENTS} -le 1 ]; then
		error '"%s" is too short.' "${PASS_NAME}"
	fi

  # "autotype" is always the first option
  if ! echo ${PASS_FILE_CONTENTS} | grep -q "^$autotypeKey"; then
    echo "$autotypeKey"
  fi

  # output all actions before other keys
	awk '
	/^\s*action(.+)/ {
		match($1, /action\((.+)\)/, theMatch)
    printf "(%s)\n", theMatch[1]
	}' <<< "${PASS_FILE_CONTENTS}"

	# Parse Rest of Keys
	awk '
	BEGIN {
		FS=": +"
		password="Yes"
	}

  /^\s*action(.+)/ {
    next
  }

  NR == 1 && ! $2 {
    print "pass"
    password=Null
  }

	$2 {
		sub("^ +", "", $1)
		if ( $1 == "pass") {
			if (password) {
        print $1
        password=Null
      }
		} else {
			print $1
		}
	}

	/^ *otpauth:/ {
    print "OTP"
  }
  ' <<< "${PASS_FILE_CONTENTS}"
}

get-pass-value () {
	local PASS_NAME="${1}"
	local PASS_KEY="${2}"

	case "${PASS_KEY}" in
	OTP)
		pass otp "${PASS_NAME}"
	;;
	pass)
		pass "${PASS_NAME}" | awk '
		BEGIN {
			FS=": +"
			password="Yes"
		}

		NR == 1 && ! $2 { print $1; password=Null }

		/pass/ && $2 { if (password) print $2 }'
	;;
	*)
		pass "${PASS_NAME}" | awk -v key="${PASS_KEY}" '
		BEGIN { FS=": +" }

		$2 {
			if ($1 == key)
				for (i=2; i<=NF; i++) print $i
		}'
	;;
	esac
}

get-action () {
	local PASS_NAME="${1}"
	local  ACT_NAME="${2}"

	pass "${PASS_NAME}" | awk -v actionKey="action${ACT_NAME}:" '{
    if ($1 != actionKey) {
      next
    }
    for (i=2; i<=NF; i++) {
      # print each fragment of the action on its own line
      print $i
    }
  }'
}

execute-action () {
	local PASS_NAME="${1-}"
	shift

	while [ -n "${1:-}" ]; do
		case "${1:-}" in
		:clip)
			clip-copy "$(get-pass-value "${PASS_NAME}" "${2}")"
			shift 2
			;;
		:type)
			dotool-type "$(get-pass-value "${PASS_NAME}" "${2}")"
			shift 2
			;;
		:slowtype)
			dotool-type "$(get-pass-value "${PASS_NAME}" "${2}")" 100
			shift 2
			;;
		:tab)
      dotool-type "$(echo -ne '\t')"
			shift 1
			;;
		:space)
      dotool-type " "
			shift 1
			;;
		:sleep)
			sleep "${2}"
			shift 2
			;;
		:exec | :notify)
			local ACT="${1:-}"
			local STR="${2:1}"
			shift 2
			# Parse String
			while [ ! "${STR:(-1)}" = '"' ]; do
				if [ -z "${1:-}" ]; then
					error 'unmatched {"} in %s.' "${PASS_NAME}"
				fi

				STR="${STR} ${1:-}"
				shift 1
			done

			STR="${STR::(-1)}"

			if [ "${ACT}" = ":exec" ]; then
				sh -c "${STR}"
			else
				notify-send "${STR}"
			fi
			;;
		:*) error "invalid action %s in %s" "${1:-}" "${PASS_NAME}" ;;
		*)  error "invalid param %s in %s" "${1:-}" "${PASS_NAME}" ;;
		esac
	done
}

call-menu () {
  set +x  # too chatty in logs to dump all the pass files
  local PIPE="$(< /dev/stdin)"
  if [ -z "${PIPE}" ]; then
    exit 1
  fi
  printf "${PIPE}" | ${MENUCMD}
  set -x
}

main () {
	local PASS_NAME PASS_KEY OUT

	PASS_NAME=$(get-pass-files | call-menu)
  if [ -z "${PASS_NAME:-}" ]; then
    isExplicitExit=yes
    return 1
  fi

	PASS_KEY=$(get-pass-keys "${PASS_NAME}" | PM_PREPOP=off call-menu)
  if [ -z "${PASS_KEY}" ]; then
    isExplicitExit=yes
    exit 1
  fi
  local theMode=$(echo $PASS_KEY | cut -f1 -d';')
  local theKey=$(echo $PASS_KEY | cut -f2 -d';')

	if [ "${theKey:0:1}" = "(" ] && [ "${theKey:(-1)}" = ")" ]; then
    # it's an action
		execute-action "${PASS_NAME}" $(get-action "${PASS_NAME}" "${theKey}")
		return 0
  elif [ "${theKey}" = "$autotypeKey" ]; then
    autotypeFromFile=$(get-pass-value "${PASS_NAME}" "$autotypeKey")
    if [ -n "$autotypeFromFile" ]; then
      execute-action "${PASS_NAME}" $autotypeFromFile
      return 0
    fi
		execute-action "${PASS_NAME}" :type user :tab :type pass
		return 0
	fi

	OUT=$(get-pass-value "${PASS_NAME}" "${theKey}")

	case "$theMode" in
		clip) clip-copy "${OUT}" ;;
		echo) printf "${OUT}" ;;
		*) dotool-type "${OUT}" ;;
	esac
}

main
